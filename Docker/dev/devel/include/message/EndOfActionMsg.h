// Generated by gencpp from file message/EndOfActionMsg.msg
// DO NOT EDIT!


#ifndef MESSAGE_MESSAGE_ENDOFACTIONMSG_H
#define MESSAGE_MESSAGE_ENDOFACTIONMSG_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace message
{
template <class ContainerAllocator>
struct EndOfActionMsg_
{
  typedef EndOfActionMsg_<ContainerAllocator> Type;

  EndOfActionMsg_()
    : exit(0)
    , reason()  {
    }
  EndOfActionMsg_(const ContainerAllocator& _alloc)
    : exit(0)
    , reason(_alloc)  {
  (void)_alloc;
    }



   typedef int16_t _exit_type;
  _exit_type exit;

   typedef std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>> _reason_type;
  _reason_type reason;





  typedef boost::shared_ptr< ::message::EndOfActionMsg_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::message::EndOfActionMsg_<ContainerAllocator> const> ConstPtr;

}; // struct EndOfActionMsg_

typedef ::message::EndOfActionMsg_<std::allocator<void> > EndOfActionMsg;

typedef boost::shared_ptr< ::message::EndOfActionMsg > EndOfActionMsgPtr;
typedef boost::shared_ptr< ::message::EndOfActionMsg const> EndOfActionMsgConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::message::EndOfActionMsg_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::message::EndOfActionMsg_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::message::EndOfActionMsg_<ContainerAllocator1> & lhs, const ::message::EndOfActionMsg_<ContainerAllocator2> & rhs)
{
  return lhs.exit == rhs.exit &&
    lhs.reason == rhs.reason;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::message::EndOfActionMsg_<ContainerAllocator1> & lhs, const ::message::EndOfActionMsg_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace message

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::message::EndOfActionMsg_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::message::EndOfActionMsg_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::message::EndOfActionMsg_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::message::EndOfActionMsg_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::message::EndOfActionMsg_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::message::EndOfActionMsg_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::message::EndOfActionMsg_<ContainerAllocator> >
{
  static const char* value()
  {
    return "6620ca083d96e08d9ae896bc1472aad2";
  }

  static const char* value(const ::message::EndOfActionMsg_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x6620ca083d96e08dULL;
  static const uint64_t static_value2 = 0x9ae896bc1472aad2ULL;
};

template<class ContainerAllocator>
struct DataType< ::message::EndOfActionMsg_<ContainerAllocator> >
{
  static const char* value()
  {
    return "message/EndOfActionMsg";
  }

  static const char* value(const ::message::EndOfActionMsg_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::message::EndOfActionMsg_<ContainerAllocator> >
{
  static const char* value()
  {
    return "int16 exit\n"
"string reason\n"
;
  }

  static const char* value(const ::message::EndOfActionMsg_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::message::EndOfActionMsg_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.exit);
      stream.next(m.reason);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct EndOfActionMsg_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::message::EndOfActionMsg_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::message::EndOfActionMsg_<ContainerAllocator>& v)
  {
    s << indent << "exit: ";
    Printer<int16_t>::stream(s, indent + "  ", v.exit);
    s << indent << "reason: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>>>::stream(s, indent + "  ", v.reason);
  }
};

} // namespace message_operations
} // namespace ros

#endif // MESSAGE_MESSAGE_ENDOFACTIONMSG_H
